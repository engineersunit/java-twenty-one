%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Natural Language Processing Statistics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

For Source URL: https://en.wikipedia.org/wiki/Go_(programming_language)

Word Count (Word Tokens): 4003

Bigram Count: 4002

Unique Bigrams: 3341

Unique Word Count (Word Types): 1241

TTR - Type-Token Ratio: 0.3100175

Top 10 Most Used Words: [the, a, to, and, of, go, type, in, is, for]

Top 10 Most Used Words (frequency): {the=207, a=119, to=111, and=109, of=105, go=96, type=73, in=69, is=60, for=46}

Top 10 Least Used Words are: [aiming, wikidata, delegation, arguments, growth, francis, command, allowing, arbitrary, edges]

Top 10 Least Used Words (frequency): {aiming=1, wikidata=1, delegation=1, arguments=1, growth=1, francis=1, command=1, allowing=1, arbitrary=1, edges=1}

Top 10 Most Interesting Words: 

distribute-work-synchronize
communicating-processes
concurrency-related
divide-and-conquer
source-to-source
concurrency-safe
containerization
generics-enabled
operating-system
three-statement


Words with Frequency as 1 (Sorted by word character length): 

distribute-work-synchronize
communicating-processes
concurrency-related
divide-and-conquer
source-to-source
concurrency-safe
containerization
generics-enabled
operating-system
three-statement
instrumentation
synchronization
steam-rollering
unintentionally
multi-processor
transformation
simultaneously
correspondence
initialization
address-taking
unsynchronized
exception-like
autocompletion
multithreaded
uninitialized
concatenation
unrecoverable
distributions
proportionate
organizations
compatibility
instantiation
syntactically
automatically
parameterized
shared-memory
effectiveness
containerized
asynchronous
compile-time
demonstrates
additionally
decompressed
non-blocking
conventional
considerable
synchronizes
polymorphism
fine-grained
substituting
requirements
introduction
type-generic
method-level
deliberately
c-compatible
complexities
verification
contributors
capabilities
standardized
non-negative
representing
interprocess
capitalized
established
flexibility
best-effort
streamlines
switch-like
exclamation
letterforms
model-style
fundamental
contradicts
substantial
constraints
intelligent
interesting
unfortunate
unambiguous
efficiently
accompanied
researchers
encouraging
influencing
open-source
parallelism
multi-value
cockroachdb
indirection
shape-typed
corrections
non-generic
prioritizes
consistency
furthermore
scalability
recursively
pre-defined
significant
co-designer
declaration
event-based
lightweight
maintaining
distributed
referred-to
translation
communicate
information
pointer-to-
definitions
delegation
statements
sans-serif
enumerated
resembling
compatible
monospaced
sequential
implements
non-expert
surpassing
especially
redesigned
engineered
associated
expression
processing
encouraged
asynchrony
playground
background
widespread
eventually
recommends
management
one-to-one
boundaries
completion
particular
transforms
coroutines
simplicity
scheduling
developing
kubernetes
high-level
summarized
structured
dictionary
javascript
discussion
performing
genericity
influenced
constraint
semicolons
indicating
algorithms
likelihood
deliberate
verifiable
production
originally
converting
interprets
accessible
references
arguments
arbitrary
iteration
parameter
computing
according
instances
addressed
collision
localhost
constants
existence
addresses
uppercase
specified
classical
terminate
abandoned
ecosystem
declaring
downloads
immutable
announced
resonated
necessary
variables
requested
intention
recursion
extremely
character
structure
determine
allocated
contrasts
magnitude
canonical
motivated
different
expressed
defending
drawbacks
inference
resulting
construct
codebases
promotion
lowercase
featuring
optimized
iterators
represent
returning
multiplex
profiling
analyzing
executing
principal
generator
important
otherwise
potential
propagate
compilers
meta-type
goimports
performed
efficient
formatted
simulated
csp-style
initially
libraries
debugging
differing
pipelines
justified
supported
ownership
describes
mechanism
attribute
processor
commented
networked
smalltalk
additions
indicates
indicated
precisely
front-end
simionato
try-catch
protocols
griesemer
multicore
community
assigning
exception
wikidata
allowing
stylized
shortcut
platform
seasoned
concrete
proposed
readable
rebuttal
argument
capacity
internal
examples
slanting
compress
feedback
integers
software
syntaxes
previous
immature
booleans
releases
thompson
supports
extended
checking
receives
filename
received
receiver
proposal
problems
retrieve
directly
websites
products
snapshot
brackets
improved
concerns
publicly
remained
possibly
dispatch
familiar
compared
omission
blocking
ordering
violated
reflects
trailing
projects
humanist
increase
designer
original
gopherjs
launches
emphasis
protocol
schmager
engineer
entirely
openness
matching
document
notation
consists
unsigned
followed
weakness
decoding
x-height
untagged
identify
compiles
recycled
compiled
external
encoding
official
keywords
borrowed
errcheck
building
francis
command
servers
network
aliases
fuzzing
writing
feature
michele
passing
comment
untyped
missing
changed
inspect
praised
treated
written
project
dislike
inspire
serving
invoked
meaning
reflect
exactly
recover
follows
ability
reached
operate
convert
dropped
likened
publish
affects
fortran
related
sources
however
favored
finally
promise
keeping
general
numeric
request
creates
visible
imports
letting
slashed
replace
certain
initial
enables
primary
greater
largely
charles
fan-out
detects
designs
signals
sharing
develop
placing
anymore
implies
scaling
receive
routine
literal
concern
thought
lengths
october
improve
domains
members
removes
specify
proceed
mapping
smaller
visited
bigelow
reputed
prevent
besides
obvious
awarded
achieve
returns
legible
adapted
setting
aiming
growth
failed
taylor
causes
assert
across
pascal
stated
during
layout
grande
docker
proper
detect
please
inside
lucida
closed
launch
though
unless
actors
august
writer
online
raised
immune
advise
expand
pauses
places
viewed
robert
status
reduce
french
length
custom
ignore
passes
little
serifs
adding
-month
partly
unlike
unsafe
strong
schema
domain
former
chapel
impact
happen
safely
record
surged
extent
relies
effect
refers
formal
simple
before
choice
modern
issues
astels
target
arrive
submit
hidden
widely
offers
starts
escape
giving
wanted
worker
tagged
worked
caller
around
avoids
almost
stored
future
tended
robust
larger
binary
occurs
entire
modify
ticket
gocode
engine
parsed
holmes
others
helped
inputs
linker
linked
agreed
result
remote
edges
spent
track
aware
scala
filed
space
float
caddy
token
sends
place
range
mutex
motto
occam
exist
april
argue
again
cases
rough
doing
solve
query
locks
makes
apart
brand
above
sizes
about
hoare
lists
hoops
lance
waste
pools
being
lower
https
limbo
parts
never
needs
cobol
comes
route
panic
whose
stack
build
clean
clear
david
along
width
wrong
study
embed
slice
three
green
const
given
smith
gives
gopls
shame
names
asked
eckel
intel
block
newly
years
noted
bruce
lines
aside
hundt
newer
union
least
omits
reuse
line
dave
core
site
utf-
work
ones
loop
open
them
drew
make
dive
made
kris
fifo
just
json
wfmu
tail
easy
jump
omit
keep
most
done
adam
char
item
give
plan
yard
time
show
book
yaml
hugo
slow
iota
acts
says
evil
tony
void
read
live
http
onto
list
need
fast
halt
sets
bugs
cilk
size
tbb
get
our
gcc
ide
ian
ken
sql
-ch
big
fmt
din
did
say
wgl
day
him
put
rsc
nil
cpu
com
err
era
guy
add
ren
xor
re
--
ml
io
he
et
do
al
o
l
h
f
d
b
-


Bigrams: 

go is
is a
a statically
statically typed
typed compiled
compiled high-level
high-level programming
programming language
language designed
designed at
at google
google by
by robert
robert griesemer
griesemer rob
rob pike
pike and
and ken
ken thompson
thompson it
it is
is syntactically
syntactically similar
similar to
to c
c but
but also
also has
has memory
memory safety
safety garbage
garbage collection
collection structural
structural typing
typing and
and csp-style
csp-style concurrency
concurrency it
it is
is often
often referred
referred to
to as
as golang
golang because
because of
of its
its former
former domain
domain name
name golang
golang org
org but
but its
its proper
proper name
name is
is go
go there
there are
are two
two major
major implementations
implementations a
a third-party
third-party source-to-source
source-to-source compiler
compiler gopherjs
gopherjs compiles
compiles go
go to
to javascript
javascript for
for front-end
front-end web
web development
development go
go was
was designed
designed at
at google
google in
in to
to improve
improve programming
programming productivity
productivity in
in an
an era
era of
of multicore
multicore networked
networked machines
machines and
and large
large codebases
codebases the
the designers
designers wanted
wanted to
to address
address criticism
criticism of
of other
other languages
languages in
in use
use at
at google
google but
but keep
keep their
their useful
useful characteristics
characteristics its
its designers
designers were
were primarily
primarily motivated
motivated by
by their
their shared
shared dislike
dislike of
of c
c go
go was
was publicly
publicly announced
announced in
in november
november and
and version
version was
was released
released in
in march
march go
go is
is widely
widely used
used in
in production
production at
at google
google and
and in
in many
many other
other organizations
organizations and
and open-source
open-source projects
projects the
the gopher
gopher mascot
mascot was
was introduced
introduced in
in for
for the
the open
open source
source launch
launch of
of the
the language
language the
the design
design by
by ren
ren e
e french
french borrowed
borrowed from
from a
a c
c wfmu
wfmu promotion
promotion in
in november
november the
the go
go and
and go
go mono
mono fonts
fonts were
were released
released by
by type
type designers
designers charles
charles bigelow
bigelow and
and kris
kris holmes
holmes specifically
specifically for
for use
use by
by the
the go
go project
project go
go is
is a
a humanist
humanist sans-serif
sans-serif resembling
resembling lucida
lucida grande
grande and
and go
go mono
mono is
is monospaced
monospaced both
both fonts
fonts adhere
adhere to
to the
the wgl
wgl character
character set
set and
and were
were designed
designed to
to be
be legible
legible with
with a
a large
large x-height
x-height and
and distinct
distinct letterforms
letterforms both
both go
go and
and go
go mono
mono adhere
adhere to
to the
the din
din standard
standard by
by having
having a
a slashed
slashed zero
zero lowercase
lowercase l
l with
with a
a tail
tail and
and an
an uppercase
uppercase i
i with
with serifs
serifs in
in april
april the
the original
original logo
logo was
was redesigned
redesigned by
by brand
brand designer
designer adam
adam smith
smith the
the new
new logo
logo is
is a
a modern
modern stylized
stylized go
go slanting
slanting right
right with
with trailing
trailing streamlines
streamlines the
the gopher
gopher mascot
mascot remained
remained the
the same
same the
the lack
lack of
of support
support for
for generic
generic programming
programming in
in initial
initial versions
versions of
of go
go drew
drew considerable
considerable criticism
criticism the
the designers
designers expressed
expressed an
an openness
openness to
to generic
generic programming
programming and
and noted
noted that
that built-in
built-in functions
functions were
were in
in fact
fact type-generic
type-generic but
but are
are treated
treated as
as special
special cases
cases pike
pike called
called this
this a
a weakness
weakness that
that might
might be
be changed
changed at
at some
some point
point the
the google
google team
team built
built at
at least
least one
one compiler
compiler for
for an
an experimental
experimental go
go dialect
dialect with
with generics
generics but
but did
did not
not release
release it
it in
in august
august the
the go
go principal
principal contributors
contributors published
published draft
draft designs
designs for
for generic
generic programming
programming and
and error
error handling
handling and
and asked
asked users
users to
to submit
submit feedback
feedback however
however the
the error
error handling
handling proposal
proposal was
was eventually
eventually abandoned
abandoned in
in june
june a
a new
new draft
draft design
design document
document was
was published
published that
that would
would add
add the
the necessary
necessary syntax
syntax to
to go
go for
for declaring
declaring generic
generic functions
functions and
and types
types a
a code
code translation
translation tool
tool go
go go
go was
was provided
provided to
to allow
allow users
users to
to try
try the
the new
new syntax
syntax along
along with
with a
a generics-enabled
generics-enabled version
version of
of the
the online
online go
go playground
playground generics
generics were
were finally
finally added
added to
to go
go in
in version
version go
go guarantees
guarantees compatibility
compatibility for
for the
the language
language specification
specification and
and major
major parts
parts of
of the
the standard
standard library
library all
all versions
versions up
up to
to the
the current
current go
go release
release have
have maintained
maintained this
this promise
promise each
each major
major go
go release
release is
is supported
supported until
until there
there are
are two
two newer
newer major
major releases
releases go
go is
is influenced
influenced by
by c
c especially
especially the
the plan
plan dialect
dialect failed
failed verification
verification see
see discussion
discussion but
but with
with an
an emphasis
emphasis on
on greater
greater simplicity
simplicity and
and safety
safety it
it consists
consists of
of go
go s
s syntax
syntax includes
includes changes
changes from
from c
c aimed
aimed at
at keeping
keeping code
code concise
concise and
and readable
readable a
a combined
combined declaration
declaration initialization
initialization operator
operator was
was introduced
introduced that
that allows
allows the
the programmer
programmer to
to write
write i
i or
or s
s hello
hello world
world without
without specifying
specifying the
the types
types of
of variables
variables used
used this
this contrasts
contrasts with
with c
c s
s int
int i
i and
and const
const char
char s
s hello
hello world
world semicolons
semicolons still
still terminate
terminate statements
statements b
b but
but are
are implicit
implicit when
when the
the end
end of
of a
a line
line occurs
occurs c
c methods
methods may
may return
return multiple
multiple values
values and
and returning
returning a
a result
result err
err pair
pair is
is the
the conventional
conventional way
way a
a method
method indicates
indicates an
an error
error to
to its
its caller
caller in
in go
go d
d go
go adds
adds literal
literal syntaxes
syntaxes for
for initializing
initializing struct
struct parameters
parameters by
by name
name and
and for
for initializing
initializing maps
maps and
and slices
slices as
as an
an alternative
alternative to
to c
c s
s three-statement
three-statement for
for loop
loop go
go s
s range
range expressions
expressions allow
allow concise
concise iteration
iteration over
over arrays
arrays slices
slices strings
strings maps
maps and
and channels
channels go
go has
has a
a number
number of
of built-in
built-in types
types including
including numeric
numeric ones
ones byte
byte int
int float
float etc
etc booleans
booleans and
and byte
byte strings
strings string
string strings
strings are
are immutable
immutable built-in
built-in operators
operators and
and keywords
keywords rather
rather than
than functions
functions provide
provide concatenation
concatenation comparison
comparison and
and utf-
utf- encoding
encoding decoding
decoding record
record types
types can
can be
be defined
defined with
with the
the struct
struct keyword
keyword for
for each
each type
type t
t and
and each
each non-negative
non-negative integer
integer constant
constant n
n there
there is
is an
an array
array type
type denoted
denoted n
n t
t arrays
arrays of
of differing
differing lengths
lengths are
are thus
thus of
of different
different types
types dynamic
dynamic arrays
arrays are
are available
available as
as slices
slices denoted
denoted t
t for
for some
some type
type t
t these
these have
have a
a length
length and
and a
a capacity
capacity specifying
specifying when
when new
new memory
memory needs
needs to
to be
be allocated
allocated to
to expand
expand the
the array
array several
several slices
slices may
may share
share their
their underlying
underlying memory
memory pointers
pointers are
are available
available for
for all
all types
types and
and the
the pointer-to-
pointer-to- t
t type
type is
is denoted
denoted t
t address-taking
address-taking and
and indirection
indirection use
use the
the and
and operators
operators as
as in
in c
c or
or happen
happen implicitly
implicitly through
through the
the method
method call
call or
or attribute
attribute access
access syntax
syntax there
there is
is no
no pointer
pointer arithmetic
arithmetic e
e except
except via
via the
the special
special unsafe
unsafe pointer
pointer type
type in
in the
the standard
standard library
library for
for a
a pair
pair of
of types
types k
k v
v the
the type
type map
map k
k v
v is
is the
the type
type mapping
mapping type-
type- k
k keys
keys to
to type-
type- v
v values
values though
though go
go programming
programming language
language specification
specification does
does not
not give
give any
any performance
performance guarantees
guarantees or
or implementation
implementation requirements
requirements for
for map
map types
types hash
hash tables
tables are
are built
built into
into the
the language
language with
with special
special syntax
syntax and
and built-in
built-in functions
functions chan
chan t
t is
is a
a channel
channel that
that allows
allows sending
sending values
values of
of type
type t
t between
between concurrent
concurrent go
go processes
processes aside
aside from
from its
its support
support for
for interfaces
interfaces go
go s
s type
type system
system is
is nominal
nominal the
the type
type keyword
keyword can
can be
be used
used to
to define
define a
a new
new named
named type
type which
which is
is distinct
distinct from
from other
other named
named types
types that
that have
have the
the same
same layout
layout in
in the
the case
case of
of a
a struct
struct the
the same
same members
members in
in the
the same
same order
order some
some conversions
conversions between
between types
types e
e g
g between
between the
the various
various integer
integer types
types are
are pre-defined
pre-defined and
and adding
adding a
a new
new type
type may
may define
define additional
additional conversions
conversions but
but conversions
conversions between
between named
named types
types must
must always
always be
be invoked
invoked explicitly
explicitly for
for example
example the
the type
type keyword
keyword can
can be
be used
used to
to define
define a
a type
type for
for ipv
ipv addresses
addresses based
based on
on -bit
-bit unsigned
unsigned integers
integers as
as follows
follows with
with this
this type
type definition
definition ipv
ipv addr
addr x
x interprets
interprets the
the uint
uint value
value x
x as
as an
an ip
ip address
address simply
simply assigning
assigning x
x to
to a
a variable
variable of
of type
type ipv
ipv addr
addr is
is a
a type
type error
error constant
constant expressions
expressions may
may be
be either
either typed
typed or
or untyped
untyped they
they are
are given
given a
a type
type when
when assigned
assigned to
to a
a typed
typed variable
variable if
if the
the value
value they
they represent
represent passes
passes a
a compile-time
compile-time check
check function
function types
types are
are indicated
indicated by
by the
the func
func keyword
keyword they
they take
take zero
zero or
or more
more parameters
parameters and
and return
return zero
zero or
or more
more values
values all
all of
of which
which are
are typed
typed the
the parameter
parameter and
and return
return values
values determine
determine a
a function
function type
type thus
thus func
func string
string int
int int
int error
error is
is the
the type
type of
of functions
functions that
that take
take a
a string
string and
and a
a -bit
-bit signed
signed integer
integer and
and return
return a
a signed
signed integer
integer of
of default
default width
width and
and a
a value
value of
of the
the built-in
built-in interface
interface type
type error
error any
any named
named type
type has
has a
a method
method set
set associated
associated with
with it
it the
the ip
ip address
address example
example above
above can
can be
be extended
extended with
with a
a method
method for
for checking
checking whether
whether its
its value
value is
is a
a known
known standard
standard due
due to
to nominal
nominal typing
typing this
this method
method definition
definition adds
adds a
a method
method to
to ipv
ipv addr
addr but
but not
not on
on uint
uint while
while methods
methods have
have special
special definition
definition and
and call
call syntax
syntax there
there is
is no
no distinct
distinct method
method type
type go
go provides
provides two
two features
features that
that replace
replace class
class inheritance
inheritance citation
citation needed
needed the
the first
first is
is embedding
embedding which
which can
can be
be viewed
viewed as
as an
an automated
automated form
form of
of composition
composition the
the second
second are
are its
its interfaces
interfaces which
which provides
provides runtime
runtime polymorphism
polymorphism interfaces
interfaces are
are a
a class
class of
of types
types and
and provide
provide a
a limited
limited form
form of
of structural
structural typing
typing in
in the
the otherwise
otherwise nominal
nominal type
type system
system of
of go
go an
an object
object which
which is
is of
of an
an interface
interface type
type is
is also
also of
of another
another type
type much
much like
like c
c objects
objects being
being simultaneously
simultaneously of
of a
a base
base and
and derived
derived class
class go
go interfaces
interfaces were
were designed
designed after
after protocols
protocols from
from the
the smalltalk
smalltalk programming
programming language
language multiple
multiple sources
sources use
use the
the term
term duck
duck typing
typing when
when describing
describing go
go interfaces
interfaces although
although the
the term
term duck
duck typing
typing is
is not
not precisely
precisely defined
defined and
and therefore
therefore not
not wrong
wrong it
it usually
usually implies
implies that
that type
type conformance
conformance is
is not
not statically
statically checked
checked because
because conformance
conformance to
to a
a go
go interface
interface is
is checked
checked statically
statically by
by the
the go
go compiler
compiler except
except when
when performing
performing a
a type
type assertion
assertion the
the go
go authors
authors prefer
prefer the
the term
term structural
structural typing
typing the
the definition
definition of
of an
an interface
interface type
type lists
lists required
required methods
methods by
by name
name and
and type
type any
any object
object of
of type
type t
t for
for which
which functions
functions exist
exist matching
matching all
all the
the required
required methods
methods of
of interface
interface type
type i
i is
is an
an object
object of
of type
type i
i as
as well
well the
the definition
definition of
of type
type t
t need
need not
not and
and cannot
cannot identify
identify type
type i
i for
for example
example if
if shape
shape square
square and
and circle
circle are
are defined
defined as
as then
then both
both a
a square
square and
and a
a circle
circle are
are implicitly
implicitly a
a shape
shape and
and can
can be
be assigned
assigned to
to a
a shape-typed
shape-typed variable
variable in
in formal
formal language
language go
go s
s interface
interface system
system provides
provides structural
structural rather
rather than
than nominal
nominal typing
typing interfaces
interfaces can
can embed
embed other
other interfaces
interfaces with
with the
the effect
effect of
of creating
creating a
a combined
combined interface
interface that
that is
is satisfied
satisfied by
by exactly
exactly the
the types
types that
that implement
implement the
the embedded
embedded interface
interface and
and any
any methods
methods that
that the
the newly
newly defined
defined interface
interface adds
adds the
the go
go standard
standard library
library uses
uses interfaces
interfaces to
to provide
provide genericity
genericity in
in several
several places
places including
including the
the input
input output
output system
system that
that is
is based
based on
on the
the concepts
concepts of
of reader
reader and
and writer
writer besides
besides calling
calling methods
methods via
via interfaces
interfaces go
go allows
allows converting
converting interface
interface values
values to
to other
other types
types with
with a
a run-time
run-time type
type check
check the
the language
language constructs
constructs to
to do
do so
so are
are the
the type
type assertion
assertion which
which checks
checks against
against a
a single
single potential
potential type
type and
and the
the type
type switch
switch which
which checks
checks against
against multiple
multiple types
types citation
citation needed
needed the
the empty
empty interface
interface interface
interface is
is an
an important
important base
base case
case because
because it
it can
can refer
refer to
to an
an item
item of
of any
any concrete
concrete type
type it
it is
is similar
similar to
to the
the object
object class
class in
in java
java or
or c
c and
and is
is satisfied
satisfied by
by any
any type
type including
including built-in
built-in types
types like
like int
int code
code using
using the
the empty
empty interface
interface cannot
cannot simply
simply call
call methods
methods or
or built-in
built-in operators
operators on
on the
the referred-to
referred-to object
object but
but it
it can
can store
store the
the interface
interface value
value try
try to
to convert
convert it
it to
to a
a more
more useful
useful type
type via
via a
a type
type assertion
assertion or
or type
type switch
switch or
or inspect
inspect it
it with
with go
go s
s reflect
reflect package
package because
because interface
interface can
can refer
refer to
to any
any value
value it
it is
is a
a limited
limited way
way to
to escape
escape the
the restrictions
restrictions of
of static
static typing
typing like
like void
void in
in c
c but
but with
with additional
additional run-time
run-time type
type checks
checks citation
citation needed
needed the
the interface
interface type
type can
can be
be used
used to
to model
model structured
structured data
data of
of any
any arbitrary
arbitrary schema
schema in
in go
go such
such as
as json
json or
or yaml
yaml data
data by
by representing
representing it
it as
as a
a map
map string
string interface
interface map
map of
of string
string to
to empty
empty interface
interface this
this recursively
recursively describes
describes data
data in
in the
the form
form of
of a
a dictionary
dictionary with
with string
string keys
keys and
and values
values of
of any
any type
type interface
interface values
values are
are implemented
implemented using
using pointer
pointer to
to data
data and
and a
a second
second pointer
pointer to
to run-time
run-time type
type information
information like
like some
some other
other types
types implemented
implemented using
using pointers
pointers in
in go
go interface
interface values
values are
are nil
nil if
if uninitialized
uninitialized since
since version
version go
go supports
supports generic
generic code
code using
using parameterized
parameterized types
types functions
functions and
and types
types now
now have
have the
the ability
ability to
to be
be generic
generic using
using type
type parameters
parameters these
these type
type parameters
parameters are
are specified
specified within
within square
square brackets
brackets right
right after
after the
the function
function or
or type
type name
name the
the compiler
compiler transforms
transforms the
the generic
generic function
function or
or type
type into
into non-generic
non-generic by
by substituting
substituting type
type arguments
arguments for
for the
the type
type parameters
parameters provided
provided either
either explicitly
explicitly by
by the
the user
user or
or type
type inference
inference by
by the
the compiler
compiler this
this transformation
transformation process
process is
is referred
referred to
to as
as type
type instantiation
instantiation interfaces
interfaces now
now can
can define
define a
a set
set of
of types
types known
known as
as type
type set
set using
using union
union operator
operator as
as well
well as
as a
a set
set of
of methods
methods these
these changes
changes were
were made
made to
to support
support type
type constraints
constraints in
in generics
generics code
code for
for a
a generic
generic function
function or
or type
type a
a constraint
constraint can
can be
be thought
thought of
of as
as the
the type
type of
of the
the type
type argument
argument a
a meta-type
meta-type this
this new
new t
t syntax
syntax will
will be
be the
the first
first use
use of
of as
as a
a token
token in
in go
go t
t means
means the
the set
set of
of all
all types
types whose
whose underlying
underlying type
type is
is t
t go
go uses
uses the
the iota
iota keyword
keyword to
to create
create enumerated
enumerated constants
constants in
in go
go s
s package
package system
system each
each package
package has
has a
a path
path e
e g
g compress
compress bzip
bzip or
or golang
golang org
org x
x net
net html
html and
and a
a name
name e
e g
g bzip
bzip or
or html
html references
references to
to other
other packages
packages definitions
definitions must
must always
always be
be prefixed
prefixed with
with the
the other
other package
package s
s name
name and
and only
only the
the capitalized
capitalized names
names from
from other
other packages
packages are
are accessible
accessible io
io reader
reader is
is public
public but
but bzip
bzip reader
reader is
is not
not the
the go
go get
get command
command can
can retrieve
retrieve packages
packages stored
stored in
in a
a remote
remote repository
repository and
and developers
developers are
are encouraged
encouraged to
to develop
develop packages
packages inside
inside a
a base
base path
path corresponding
corresponding to
to a
a source
source repository
repository such
such as
as example
example com
com user
user name
name package
package name
name to
to reduce
reduce the
the likelihood
likelihood of
of name
name collision
collision with
with future
future additions
additions to
to the
the standard
standard library
library or
or other
other external
external libraries
libraries the
the go
go language
language has
has built-in
built-in facilities
facilities as
as well
well as
as library
library support
support for
for writing
writing concurrent
concurrent programs
programs concurrency
concurrency refers
refers not
not only
only to
to cpu
cpu parallelism
parallelism but
but also
also to
to asynchrony
asynchrony letting
letting slow
slow operations
operations like
like a
a database
database or
or network
network read
read run
run while
while the
the program
program does
does other
other work
work as
as is
is common
common in
in event-based
event-based servers
servers the
the primary
primary concurrency
concurrency construct
construct is
is the
the goroutine
goroutine a
a type
type of
of green
green thread
thread a
a function
function call
call prefixed
prefixed with
with the
the go
go keyword
keyword starts
starts a
a function
function in
in a
a new
new goroutine
goroutine the
the language
language specification
specification does
does not
not specify
specify how
how goroutines
goroutines should
should be
be implemented
implemented but
but current
current implementations
implementations multiplex
multiplex a
a go
go process
process s
s goroutines
goroutines onto
onto a
a smaller
smaller set
set of
of operating-system
operating-system threads
threads similar
similar to
to the
the scheduling
scheduling performed
performed in
in erlang
erlang while
while a
a standard
standard library
library package
package featuring
featuring most
most of
of the
the classical
classical concurrency
concurrency control
control structures
structures mutex
mutex locks
locks etc
etc is
is available
available idiomatic
idiomatic concurrent
concurrent programs
programs instead
instead prefer
prefer channels
channels which
which send
send messages
messages between
between goroutines
goroutines optional
optional buffers
buffers store
store messages
messages in
in fifo
fifo order
order and
and allow
allow sending
sending goroutines
goroutines to
to proceed
proceed before
before their
their messages
messages are
are received
received channels
channels are
are typed
typed so
so that
that a
a channel
channel of
of type
type chan
chan t
t can
can only
only be
be used
used to
to transfer
transfer messages
messages of
of type
type t
t special
special syntax
syntax is
is used
used to
to operate
operate on
on them
them -ch
-ch is
is an
an expression
expression that
that causes
causes the
the executing
executing goroutine
goroutine to
to block
block until
until a
a value
value comes
comes in
in over
over the
the channel
channel ch
ch while
while ch
ch -
- x
x sends
sends the
the value
value x
x possibly
possibly blocking
blocking until
until another
another goroutine
goroutine receives
receives the
the value
value the
the built-in
built-in switch-like
switch-like select
select statement
statement can
can be
be used
used to
to implement
implement non-blocking
non-blocking communication
communication on
on multiple
multiple channels
channels see
see below
below for
for an
an example
example go
go has
has a
a memory
memory model
model describing
describing how
how goroutines
goroutines must
must use
use channels
channels or
or other
other operations
operations to
to safely
safely share
share data
data the
the existence
existence of
of channels
channels sets
sets go
go apart
apart from
from actor
actor model-style
model-style concurrent
concurrent languages
languages like
like erlang
erlang where
where messages
messages are
are addressed
addressed directly
directly to
to actors
actors corresponding
corresponding to
to goroutines
goroutines the
the actor
actor style
style can
can be
be simulated
simulated in
in go
go by
by maintaining
maintaining a
a one-to-one
one-to-one correspondence
correspondence between
between goroutines
goroutines and
and channels
channels but
but the
the language
language allows
allows multiple
multiple goroutines
goroutines to
to share
share a
a channel
channel or
or a
a single
single goroutine
goroutine to
to send
send and
and receive
receive on
on multiple
multiple channels
channels from
from these
these tools
tools one
one can
can build
build concurrent
concurrent constructs
constructs like
like worker
worker pools
pools pipelines
pipelines in
in which
which say
say a
a file
file is
is decompressed
decompressed and
and parsed
parsed as
as it
it downloads
downloads background
background calls
calls with
with timeout
timeout fan-out
fan-out parallel
parallel calls
calls to
to a
a set
set of
of services
services and
and others
others channels
channels have
have also
also found
found uses
uses further
further from
from the
the usual
usual notion
notion of
of interprocess
interprocess communication
communication like
like serving
serving as
as a
a concurrency-safe
concurrency-safe list
list of
of recycled
recycled buffers
buffers implementing
implementing coroutines
coroutines which
which helped
helped inspire
inspire the
the name
name goroutine
goroutine and
and implementing
implementing iterators
iterators concurrency-related
concurrency-related structural
structural conventions
conventions of
of go
go channels
channels and
and alternative
alternative channel
channel inputs
inputs are
are derived
derived from
from tony
tony hoare
hoare s
s communicating
communicating sequential
sequential processes
processes model
model unlike
unlike previous
previous concurrent
concurrent programming
programming languages
languages such
such as
as occam
occam or
or limbo
limbo a
a language
language on
on which
which go
go co-designer
co-designer rob
rob pike
pike worked
worked go
go does
does not
not provide
provide any
any built-in
built-in notion
notion of
of safe
safe or
or verifiable
verifiable concurrency
concurrency while
while the
the communicating-processes
communicating-processes model
model is
is favored
favored in
in go
go it
it is
is not
not the
the only
only one
one all
all goroutines
goroutines in
in a
a program
program share
share a
a single
single address
address space
space this
this means
means that
that mutable
mutable objects
objects and
and pointers
pointers can
can be
be shared
shared between
between goroutines
goroutines see
see lack
lack of
of data
data race
race safety
safety below
below although
although go
go s
s concurrency
concurrency features
features are
are not
not aimed
aimed primarily
primarily at
at parallel
parallel processing
processing they
they can
can be
be used
used to
to program
program shared-memory
shared-memory multi-processor
multi-processor machines
machines various
various studies
studies have
have been
been done
done into
into the
the effectiveness
effectiveness of
of this
this approach
approach one
one of
of these
these studies
studies compared
compared the
the size
size in
in lines
lines of
of code
code and
and speed
speed of
of programs
programs written
written by
by a
a seasoned
seasoned programmer
programmer not
not familiar
familiar with
with the
the language
language and
and corrections
corrections to
to these
these programs
programs by
by a
a go
go expert
expert from
from google
google s
s development
development team
team doing
doing the
the same
same for
for chapel
chapel cilk
cilk and
and intel
intel tbb
tbb the
the study
study found
found that
that the
the non-expert
non-expert tended
tended to
to write
write divide-and-conquer
divide-and-conquer algorithms
algorithms with
with one
one go
go statement
statement per
per recursion
recursion while
while the
the expert
expert wrote
wrote distribute-work-synchronize
distribute-work-synchronize programs
programs using
using one
one goroutine
goroutine per
per processor
processor core
core the
the expert
expert s
s programs
programs were
were usually
usually faster
faster but
but also
also longer
longer go
go s
s approach
approach to
to concurrency
concurrency can
can be
be summarized
summarized as
as don
don t
t communicate
communicate by
by sharing
sharing memory
memory share
share memory
memory by
by communicating
communicating there
there are
are no
no restrictions
restrictions on
on how
how goroutines
goroutines access
access shared
shared data
data making
making data
data races
races possible
possible specifically
specifically unless
unless a
a program
program explicitly
explicitly synchronizes
synchronizes via
via channels
channels or
or other
other means
means writes
writes from
from one
one goroutine
goroutine might
might be
be partly
partly entirely
entirely or
or not
not at
at all
all visible
visible to
to another
another often
often with
with no
no guarantees
guarantees about
about ordering
ordering of
of writes
writes furthermore
furthermore go
go s
s internal
internal data
data structures
structures like
like interface
interface values
values slice
slice headers
headers hash
hash tables
tables and
and string
string headers
headers are
are not
not immune
immune to
to data
data races
races so
so type
type and
and memory
memory safety
safety can
can be
be violated
violated in
in multithreaded
multithreaded programs
programs that
that modify
modify shared
shared instances
instances of
of those
those types
types without
without synchronization
synchronization instead
instead of
of language
language support
support safe
safe concurrent
concurrent programming
programming thus
thus relies
relies on
on conventions
conventions for
for example
example chisnall
chisnall recommends
recommends an
an idiom
idiom called
called aliases
aliases xor
xor mutable
mutable meaning
meaning that
that passing
passing a
a mutable
mutable value
value or
or pointer
pointer over
over a
a channel
channel signals
signals a
a transfer
transfer of
of ownership
ownership over
over the
the value
value to
to its
its receiver
receiver the
the gc
gc toolchain
toolchain has
has an
an optional
optional data
data race
race detector
detector that
that can
can check
check for
for unsynchronized
unsynchronized access
access to
to shared
shared memory
memory during
during runtime
runtime since
since version
version additionally
additionally a
a best-effort
best-effort race
race detector
detector is
is also
also included
included by
by default
default since
since version
version of
of the
the gc
gc runtime
runtime for
for access
access to
to the
the map
map data
data type
type the
the linker
linker in
in the
the gc
gc toolchain
toolchain creates
creates statically
statically linked
linked binaries
binaries by
by default
default therefore
therefore all
all go
go binaries
binaries include
include the
the go
go runtime
runtime go
go deliberately
deliberately omits
omits certain
certain features
features common
common in
in other
other languages
languages including
including implementation
implementation inheritance
inheritance assertions
assertions f
f pointer
pointer arithmetic
arithmetic e
e implicit
implicit type
type conversions
conversions untagged
untagged unions
unions g
g and
and tagged
tagged unions
unions h
h the
the designers
designers added
added only
only those
those facilities
facilities that
that all
all three
three agreed
agreed on
on of
of the
the omitted
omitted language
language features
features the
the designers
designers explicitly
explicitly argue
argue against
against assertions
assertions and
and pointer
pointer arithmetic
arithmetic while
while defending
defending the
the choice
choice to
to omit
omit type
type inheritance
inheritance as
as giving
giving a
a more
more useful
useful language
language encouraging
encouraging instead
instead the
the use
use of
of interfaces
interfaces to
to achieve
achieve dynamic
dynamic dispatch
dispatch i
i and
and composition
composition to
to reuse
reuse code
code composition
composition and
and delegation
delegation are
are in
in fact
fact largely
largely automated
automated by
by struct
struct embedding
embedding according
according to
to researchers
researchers schmager
schmager et
et al
al this
this feature
feature has
has many
many of
of the
the drawbacks
drawbacks of
of inheritance
inheritance it
it affects
affects the
the public
public interface
interface of
of objects
objects it
it is
is not
not fine-grained
fine-grained i
i e
e no
no method-level
method-level control
control over
over embedding
embedding methods
methods of
of embedded
embedded objects
objects cannot
cannot be
be hidden
hidden and
and it
it is
is static
static making
making it
it not
not obvious
obvious whether
whether programmers
programmers will
will overuse
overuse it
it to
to the
the extent
extent that
that programmers
programmers in
in other
other languages
languages are
are reputed
reputed to
to overuse
overuse inheritance
inheritance exception
exception handling
handling was
was initially
initially omitted
omitted in
in go
go due
due to
to lack
lack of
of a
a design
design that
that gives
gives value
value proportionate
proportionate to
to the
the complexity
complexity an
an exception-like
exception-like panic
panic recover
recover mechanism
mechanism that
that avoids
avoids the
the usual
usual try-catch
try-catch control
control structure
structure was
was proposed
proposed and
and released
released in
in the
the march
march snapshot
snapshot the
the go
go authors
authors advise
advise using
using it
it for
for unrecoverable
unrecoverable errors
errors such
such as
as those
those that
that should
should halt
halt an
an entire
entire program
program or
or server
server request
request or
or as
as a
a shortcut
shortcut to
to propagate
propagate errors
errors up
up the
the stack
stack within
within a
a package
package across
across package
package boundaries
boundaries go
go includes
includes a
a canonical
canonical error
error type
type and
and multi-value
multi-value returns
returns using
using this
this type
type are
are the
the standard
standard idiom
idiom the
the go
go authors
authors put
put substantial
substantial effort
effort into
into influencing
influencing the
the style
style of
of go
go programs
programs the
the main
main go
go distribution
distribution includes
includes tools
tools for
for building
building testing
testing and
and analyzing
analyzing code
code it
it also
also includes
includes profiling
profiling and
and debugging
debugging support
support fuzzing
fuzzing capabilities
capabilities to
to detect
detect bugs
bugs runtime
runtime instrumentation
instrumentation for
for example
example to
to track
track garbage
garbage collection
collection pauses
pauses and
and a
a data
data race
race detector
detector another
another tool
tool maintained
maintained by
by the
the go
go team
team but
but is
is not
not included
included in
in go
go distributions
distributions is
is gopls
gopls a
a language
language server
server that
that provides
provides ide
ide features
features such
such as
as intelligent
intelligent code
code completion
completion to
to language
language server
server protocol
protocol compatible
compatible editors
editors an
an ecosystem
ecosystem of
of third-party
third-party tools
tools adds
adds to
to the
the standard
standard distribution
distribution such
such as
as gocode
gocode which
which enables
enables code
code autocompletion
autocompletion in
in many
many text
text editors
editors goimports
goimports which
which automatically
automatically adds
adds removes
removes package
package imports
imports as
as needed
needed and
and errcheck
errcheck which
which detects
detects code
code that
that might
might unintentionally
unintentionally ignore
ignore errors
errors where
where fmt
fmt is
is the
the package
package for
for formatted
formatted i
i o
o similar
similar to
to c
c s
s c
c file
file input
input output
output the
the following
following simple
simple program
program demonstrates
demonstrates go
go s
s concurrency
concurrency features
features to
to implement
implement an
an asynchronous
asynchronous program
program it
it launches
launches two
two lightweight
lightweight threads
threads goroutines
goroutines one
one waits
waits for
for the
the user
user to
to type
type some
some text
text while
while the
the other
other implements
implements a
a timeout
timeout the
the select
select statement
statement waits
waits for
for either
either of
of these
these goroutines
goroutines to
to send
send a
a message
message to
to the
the main
main routine
routine and
and acts
acts on
on the
the first
first message
message to
to arrive
arrive example
example adapted
adapted from
from david
david chisnall
chisnall s
s book
book the
the testing
testing package
package provides
provides support
support for
for automated
automated testing
testing of
of go
go packages
packages target
target function
function example
example test
test code
code note
note that
that assert
assert keyword
keyword is
is missing
missing in
in go
go tests
tests live
live in
in filename
filename test
test go
go at
at the
the same
same package
package it
it is
is possible
possible to
to run
run tests
tests in
in parallel
parallel the
the net
net http
http package
package provides
provides support
support for
for creating
creating web
web applications
applications this
this example
example would
would show
show hello
hello world
world when
when localhost
localhost is
is visited
visited go
go has
has found
found widespread
widespread adoption
adoption in
in various
various domains
domains due
due to
to its
its robust
robust standard
standard library
library and
and ease
ease of
of use
use popular
popular applications
applications include
include caddy
caddy a
a web
web server
server that
that automates
automates the
the process
process of
of setting
setting up
up https
https docker
docker which
which provides
provides a
a platform
platform for
for containerization
containerization aiming
aiming to
to ease
ease the
the complexities
complexities of
of software
software development
development and
and deployment
deployment kubernetes
kubernetes which
which automates
automates the
the deployment
deployment scaling
scaling and
and management
management of
of containerized
containerized applications
applications cockroachdb
cockroachdb a
a distributed
distributed sql
sql database
database engineered
engineered for
for scalability
scalability and
and strong
strong consistency
consistency and
and hugo
hugo a
a static
static site
site generator
generator that
that prioritizes
prioritizes speed
speed and
and flexibility
flexibility allowing
allowing developers
developers to
to create
create websites
websites efficiently
efficiently for
for further
further examples
examples please
please also
also see
see related
related query
query to
to wikidata
wikidata the
the interface
interface system
system and
and the
the deliberate
deliberate omission
omission of
of inheritance
inheritance were
were praised
praised by
by michele
michele simionato
simionato who
who likened
likened these
these characteristics
characteristics to
to those
those of
of standard
standard ml
ml calling
calling it
it a
a shame
shame that
that no
no popular
popular language
language has
has followed
followed this
this particular
particular route
route dave
dave astels
astels at
at engine
engine yard
yard wrote
wrote in
in go
go is
is extremely
extremely easy
easy to
to dive
dive into
into there
there are
are a
a minimal
minimal number
number of
of fundamental
fundamental language
language concepts
concepts and
and the
the syntax
syntax is
is clean
clean and
and designed
designed to
to be
be clear
clear and
and unambiguous
unambiguous go
go is
is still
still experimental
experimental and
and still
still a
a little
little rough
rough around
around the
the edges
edges go
go was
was named
named programming
programming language
language of
of the
the year
year by
by the
the tiobe
tiobe programming
programming community
community index
index in
in its
its first
first year
year for
for having
having a
a larger
larger -month
-month increase
increase in
in popularity
popularity in
in only
only months
months after
after its
its introduction
introduction in
in november
november than
than any
any other
other language
language that
that year
year and
and reached
reached th
th place
place by
by january
january surpassing
surpassing established
established languages
languages like
like pascal
pascal by
by june
june its
its ranking
ranking had
had dropped
dropped to
to below
below th
th in
in the
the index
index placing
placing it
it lower
lower than
than cobol
cobol and
and fortran
fortran but
but as
as of
of january
january its
its ranking
ranking had
had surged
surged to
to th
th indicating
indicating significant
significant growth
growth in
in popularity
popularity and
and adoption
adoption go
go was
was again
again awarded
awarded tiobe
tiobe programming
programming language
language of
of the
the year
year in
in citation
citation needed
needed bruce
bruce eckel
eckel has
has stated
stated the
the complexity
complexity of
of c
c even
even more
more complexity
complexity has
has been
been added
added in
in the
the new
new c
c and
and the
the resulting
resulting impact
impact on
on productivity
productivity is
is no
no longer
longer justified
justified all
all the
the hoops
hoops that
that the
the c
c programmer
programmer had
had to
to jump
jump through
through in
in order
order to
to use
use a
a c-compatible
c-compatible language
language make
make no
no sense
sense anymore
anymore --
-- they
they re
re just
just a
a waste
waste of
of time
time and
and effort
effort go
go makes
makes much
much more
more sense
sense for
for the
the class
class of
of problems
problems that
that c
c was
was originally
originally intended
intended to
to solve
solve a
a evaluation
evaluation of
of the
the language
language and
and its
its gc
gc implementation
implementation in
in comparison
comparison to
to c
c gcc
gcc java
java and
and scala
scala by
by a
a google
google engineer
engineer found
found go
go offers
offers interesting
interesting language
language features
features which
which also
also allow
allow for
for a
a concise
concise and
and standardized
standardized notation
notation the
the compilers
compilers for
for this
this language
language are
are still
still immature
immature which
which reflects
reflects in
in both
both performance
performance and
and binary
binary sizes
sizes the
the evaluation
evaluation got
got a
a rebuttal
rebuttal from
from the
the go
go development
development team
team ian
ian lance
lance taylor
taylor who
who had
had improved
improved the
the go
go code
code for
for hundt
hundt s
s paper
paper had
had not
not been
been aware
aware of
of the
the intention
intention to
to publish
publish his
his code
code and
and says
says that
that his
his version
version was
was never
never intended
intended to
to be
be an
an example
example of
of idiomatic
idiomatic or
or efficient
efficient go
go russ
russ cox
cox then
then optimized
optimized the
the go
go code
code as
as well
well as
as the
the c
c code
code and
and got
got the
the go
go code
code to
to run
run almost
almost as
as fast
fast as
as the
the c
c version
version and
and more
more than
than an
an order
order of
of magnitude
magnitude faster
faster than
than the
the code
code in
in the
the paper
paper on
on november
november the
the day
day of
of the
the general
general release
release of
of the
the language
language francis
francis mccabe
mccabe developer
developer of
of the
the go
go programming
programming language
language note
note the
the exclamation
exclamation point
point requested
requested a
a name
name change
change of
of google
google s
s language
language to
to prevent
prevent confusion
confusion with
with his
his language
language which
which he
he had
had spent
spent years
years developing
developing mccabe
mccabe raised
raised concerns
concerns that
that the
the big
big guy
guy will
will end
end up
up steam-rollering
steam-rollering over
over him
him and
and this
this concern
concern resonated
resonated with
with the
the more
more than
than developers
developers who
who commented
commented on
on google
google s
s official
official issues
issues thread
thread saying
saying they
they should
should change
change the
the name
name with
with some
some even
even saying
saying the
the issue
issue contradicts
contradicts google
google s
s motto
motto of
of don
don t
t be
be evil
evil on
on october
october the
the filed
filed public
public issue
issue ticket
ticket was
was closed
closed by
by google
google developer
developer russ
russ cox
cox rsc
rsc with
with the
the custom
custom status
status unfortunate
unfortunate accompanied
accompanied by
by the
the following
following comment
comment there
there are
are many
many computing
computing products
products and
and services
services named
named go
go in
in the
the months
months since
since our
our release
release there
there has
has been
been minimal
minimal confusion
confusion of
of the
the two


Words by frequency (sorted - descending): 

the 207
a 119
to 111
and 109
of 105
go 96
type 73
in 69
is 60
for 46
as 37
are 36
that 36
by 34
language 31
or 30
with 29
be 29
an 26
it 26
s 25
types 24
interface 23
can 23
c 21
not 20
which 20
code 18
but 18
t 17
other 17
on 17
was 16
this 16
its 14
from 14
has 13
name 13
package 13
programming 13
goroutines 13
data 13
value 12
google 11
example 11
standard 11
any 11
interfaces 11
at 11
channels 11
all 10
values 10
built-in 10
like 10
i 9
there 9
syntax 9
new 9
were 9
using 9
methods 9
used 9
also 9
use 9
these 8
version 8
concurrency 8
function 8
typing 8
goroutine 8
memory 8
generic 8
more 8
set 8
while 8
no 8
programs 8
one 8
support 8
functions 7
e 7
provides 7
have 7
concurrent 7
languages 7
features 7
keyword 7
string 7
program 7
library 7
than 7
pointer 7
between 7
method 7
error 7
same 6
x 6
multiple 6
named 6
channel 6
system 6
such 6
had 6
when 6
some 6
over 6
inheritance 6
designers 6
they 6
only 6
packages 5
object 5
compiler 5
special 5
release 5
share 5
two 5
parameters 5
runtime 5
structural 5
designed 5
adds 5
class 5
messages 5
map 5
shared 5
into 5
needed 5
definition 5
typed 5
int 5
year 4
objects 4
via 4
because 4
ipv 4
address 4
g 4
november 4
citation 4
well 4
struct 4
order 4
similar 4
conversions 4
including 4
define 4
defined 4
each 4
another 4
found 4
does 4
team 4
call 4
those 4
race 4
statically 4
provide 4
explicitly 4
major 4
both 4
their 4
been 4
see 4
gc 4
model 4
server 4
may 4
return 4
integer 4
includes 4
since 4
allows 4
access 4
nominal 4
many 4
up 4
allow 4
safety 4
still 4
slices 4
first 4
development 4
thus 3
after 3
k 3
v 3
reader 3
empty 3
implement 3
check 3
lack 3
useful 3
handling 3
arithmetic 3
concise 3
testing 3
programmer 3
pike 3
authors 3
against 3
assertion 3
implemented 3
guarantees 3
below 3
detector 3
design 3
until 3
pointers 3
must 3
complexity 3
default 3
automated 3
run 3
either 3
generics 3
might 3
checks 3
mono 3
statement 3
applications 3
developers 3
mutable 3
bzip 3
web 3
embedding 3
means 3
his 3
square 3
who 3
parallel 3
addr 3
process 3
various 3
uses 3
user 3
how 3
composition 3
term 3
added 3
static 3
golang 3
specification 3
form 3
expert 3
if 3
run-time 3
arrays 3
hello 3
world 3
strings 3
errors 3
control 3
due 3
released 3
denoted 3
so 3
single 3
th 3
available 3
zero 3
base 3
tools 3
operators 3
cannot 3
should 3
send 3
distinct 3
public 3
will 3
implementation 3
instead 3
variable 3
without 2
introduced 2
would 2
optional 2
much 2
n 2
calling 2
combined 2
got 2
duck 2
making 2
wrote 2
often 2
users 2
tests 2
therefore 2
provided 2
tiobe 2
end 2
headers 2
message 2
referred 2
called 2
approach 2
number 2
per 2
write 2
shape 2
byte 2
underlying 2
even 2
hash 2
deployment 2
prefixed 2
implicitly 2
cox 2
idiomatic 2
etc 2
whether 2
net 2
maintained 2
always 2
comparison 2
buffers 2
adhere 2
tool 2
races 2
try 2
rob 2
-bit 2
intended 2
saying 2
machines 2
java 2
input 2
specifying 2
creating 2
circle 2
notion 2
where 2
popular 2
conformance 2
structures 2
services 2
automates 2
through 2
source 2
operator 2
expressions 2
longer 2
erlang 2
effort 2
minimal 2
now 2
derived 2
way 2
pair 2
func 2
refer 2
experimental 2
required 2
specifically 2
case 2
having 2
waits 2
style 2
implicit 2
toolchain 2
january 2
chan 2
checked 2
gopher 2
transfer 2
conventions 2
ease 2
constructs 2
point 2
database 2
fonts 2
editors 2
built 2
alternative 2
threads 2
further 2
simply 2
evaluation 2
path 2
chisnall 2
mccabe 2
draft 2
omitted 2
assigned 2
mascot 2
adoption 2
popularity 2
embedded 2
ch 2
initializing 2
possible 2
right 2
march 2
actor 2
june 2
calls 2
dialect 2
criticism 2
test 2
garbage 2
take 2
confusion 2
rather 2
additional 2
timeout 2
primarily 2
although 2
developer 2
idiom 2
select 2
output 2
tables 2
text 2
assertions 2
usually 2
issue 2
large 2
satisfied 2
ip 2
index 2
signed 2
sense 2
aimed 2
don 2
file 2
known 2
sending 2
implementations 2
within 2
implementing 2
change 2
facilities 2
constant 2
several 2
main 2
second 2
faster 2
logo 2
communication 2
months 2
restrictions 2
keys 2
switch 2
productivity 2
included 2
processes 2
thread 2
communicating 2
writes 2
programmers 2
based 2
then 2
concepts 2
except 2
fact 2
current 2
unions 2
store 2
ranking 2
dynamic 2
usual 2
maps 2
type- 2
collection 2
overuse 2
changes 2
speed 2
common 2
characteristics 2
org 2
repository 2
versions 2
following 2
distribution 2
include 2
uint 2
prefer 2
describing 2
create 2
html 2
published 2
safe 2
binaries 2
note 2
operations 2
paper 2
array 2
russ 2
studies 2
third-party 2
limited 2
performance 2
corresponding 2
exception 1
reuse 1
references 1
remote 1
building 1
setting 1
definitions 1
assigning 1
interprocess 1
community 1
adapted 1
- 1
size 1
legible 1
returns 1
pointer-to- 1
accessible 1
omits 1
achieve 1
least 1
errcheck 1
interprets 1
cilk 1
multicore 1
result 1
bugs 1
xor 1
agreed 1
borrowed 1
linked 1
linker 1
b 1
sets 1
d 1
awarded 1
f 1
h 1
representing 1
union 1
l 1
o 1
newer 1
halt 1
fast 1
obvious 1
information 1
griesemer 1
communicate 1
keywords 1
inputs 1
converting 1
official 1
besides 1
autocompletion 1
helped 1
ren 1
protocols 1
others 1
add 1
hundt 1
need 1
divide-and-conquer 1
originally 1
try-catch 1
list 1
encoding 1
onto 1
holmes 1
external 1
aside 1
simionato 1
http 1
parsed 1
front-end 1
production 1
non-negative 1
prevent 1
precisely 1
verifiable 1
compiled 1
recycled 1
engine 1
containerized 1
exception-like 1
standardized 1
reputed 1
gocode 1
lines 1
bruce 1
live 1
effectiveness 1
capabilities 1
compiles 1
ticket 1
identify 1
bigelow 1
noted 1
modify 1
visited 1
translation 1
shared-memory 1
contributors 1
deliberate 1
smaller 1
entire 1
occurs 1
years 1
referred-to 1
newly 1
unsynchronized 1
untagged 1
block 1
mapping 1
x-height 1
proceed 1
specify 1
distributed 1
intel 1
decoding 1
likelihood 1
binary 1
larger 1
algorithms 1
indicated 1
eckel 1
guy 1
indicating 1
asked 1
indicates 1
era 1
robust 1
additions 1
err 1
semicolons 1
tended 1
names 1
future 1
stored 1
constraint 1
removes 1
smalltalk 1
com 1
almost 1
operating-system 1
members 1
verification 1
read 1
void 1
avoids 1
domains 1
cpu 1
maintaining 1
tony 1
complexities 1
improve 1
october 1
evil 1
networked 1
shame 1
influenced 1
around 1
lightweight 1
gopls 1
weakness 1
c-compatible 1
parameterized 1
genericity 1
commented 1
says 1
deliberately 1
performing 1
followed 1
caller 1
lengths 1
unsigned 1
consists 1
thought 1
discussion 1
acts 1
concern 1
nil 1
worked 1
tagged 1
notation 1
worker 1
iota 1
processor 1
javascript 1
dictionary 1
slow 1
wanted 1
address-taking 1
rsc 1
event-based 1
automatically 1
document 1
giving 1
matching 1
literal 1
routine 1
openness 1
structured 1
initialization 1
attribute 1
mechanism 1
escape 1
gives 1
receive 1
scaling 1
correspondence 1
summarized 1
entirely 1
declaration 1
high-level 1
describes 1
ownership 1
syntactically 1
implies 1
co-designer 1
supported 1
kubernetes 1
hugo 1
smith 1
developing 1
justified 1
anymore 1
placing 1
pipelines 1
differing 1
scheduling 1
starts 1
instantiation 1
yaml 1
offers 1
given 1
widely 1
significant 1
develop 1
sharing 1
pre-defined 1
signals 1
designs 1
compatibility 1
hidden 1
const 1
submit 1
book 1
show 1
simplicity 1
recursively 1
scalability 1
arrive 1
debugging 1
green 1
libraries 1
detects 1
engineer 1
target 1
fan-out 1
furthermore 1
method-level 1
initially 1
astels 1
multi-processor 1
time 1
coroutines 1
schmager 1
generics-enabled 1
yard 1
charles 1
csp-style 1
issues 1
consistency 1
three 1
put 1
largely 1
slice 1
embed 1
greater 1
plan 1
give 1
item 1
simulated 1
prioritizes 1
primary 1
study 1
formatted 1
modern 1
enables 1
efficient 1
initial 1
performed 1
concurrency-related 1
wrong 1
width 1
char 1
choice 1
certain 1
goimports 1
meta-type 1
before 1
non-generic 1
transforms 1
replace 1
simple 1
him 1
compilers 1
containerization 1
protocol 1
emphasis 1
slashed 1
propagate 1
letting 1
day 1
potential 1
wgl 1
otherwise 1
adam 1
imports 1
visible 1
particular 1
done 1
most 1
important 1
formal 1
concurrency-safe 1
corrections 1
refers 1
effect 1
keep 1
creates 1
omit 1
launches 1
request 1
type-generic 1
generator 1
numeric 1
principal 1
general 1
relies 1
along 1
david 1
introduction 1
requirements 1
gopherjs 1
original 1
clear 1
substituting 1
say 1
designer 1
increase 1
clean 1
build 1
organizations 1
extent 1
shape-typed 1
indirection 1
stack 1
humanist 1
projects 1
executing 1
analyzing 1
trailing 1
surged 1
record 1
reflects 1
safely 1
jump 1
violated 1
happen 1
impact 1
al 1
chapel 1
easy 1
whose 1
unintentionally 1
former 1
panic 1
route 1
profiling 1
domain 1
simultaneously 1
cockroachdb 1
schema 1
strong 1
ordering 1
comes 1
unsafe 1
blocking 1
unlike 1
omission 1
compared 1
completion 1
multi-value 1
keeping 1
tail 1
partly 1
familiar 1
cobol 1
multiplex 1
returning 1
did 1
represent 1
wfmu 1
dispatch 1
din 1
promise 1
do 1
fmt 1
-month 1
adding 1
serifs 1
source-to-source 1
boundaries 1
possibly 1
needs 1
finally 1
remained 1
favored 1
publicly 1
et 1
never 1
parts 1
little 1
iterators 1
however 1
proportionate 1
sources 1
optimized 1
parallelism 1
related 1
passes 1
fortran 1
ignore 1
json 1
featuring 1
just 1
fifo 1
kris 1
lowercase 1
custom 1
one-to-one 1
length 1
affects 1
open-source 1
concerns 1
management 1
publish 1
likened 1
recommends 1
he 1
limbo 1
promotion 1
big 1
codebases 1
dropped 1
construct 1
convert 1
improved 1
https 1
influencing 1
french 1
reduce 1
encouraging 1
researchers 1
io 1
made 1
lower 1
being 1
fine-grained 1
resulting 1
distributions 1
brackets 1
accompanied 1
operate 1
reached 1
snapshot 1
status 1
inference 1
drawbacks 1
eventually 1
products 1
robert 1
-ch 1
viewed 1
ability 1
places 1
efficiently 1
websites 1
unambiguous 1
defending 1
pools 1
polymorphism 1
unrecoverable 1
pauses 1
widespread 1
expressed 1
directly 1
different 1
ml 1
waste 1
-- 1
motivated 1
lance 1
hoops 1
follows 1
canonical 1
expand 1
synchronizes 1
background 1
lists 1
retrieve 1
problems 1
sql 1
considerable 1
advise 1
playground 1
magnitude 1
dive 1
steam-rollering 1
contrasts 1
make 1
allocated 1
unfortunate 1
recover 1
immune 1
determine 1
interesting 1
raised 1
exactly 1
intelligent 1
structure 1
drew 1
conventional 1
asynchrony 1
synchronization 1
online 1
writer 1
hoare 1
about 1
constraints 1
reflect 1
character 1
extremely 1
encouraged 1
sizes 1
meaning 1
above 1
brand 1
recursion 1
proposal 1
receiver 1
august 1
them 1
received 1
substantial 1
intention 1
actors 1
requested 1
re 1
filename 1
processing 1
invoked 1
receives 1
checking 1
contradicts 1
fundamental 1
distribute-work-synchronize 1
model-style 1
non-blocking 1
extended 1
serving 1
unless 1
ken 1
ian 1
supports 1
thompson 1
apart 1
variables 1
expression 1
though 1
necessary 1
letterforms 1
makes 1
launch 1
releases 1
resonated 1
inspire 1
associated 1
closed 1
open 1
lucida 1
dislike 1
project 1
exclamation 1
inside 1
locks 1
engineered 1
loop 1
written 1
treated 1
praised 1
redesigned 1
query 1
please 1
ide 1
announced 1
immutable 1
especially 1
surpassing 1
solve 1
non-expert 1
communicating-processes 1
switch-like 1
inspect 1
changed 1
implements 1
doing 1
rough 1
sequential 1
detect 1
proper 1
streamlines 1
docker 1
downloads 1
declaring 1
missing 1
booleans 1
monospaced 1
immature 1
cases 1
previous 1
again 1
argue 1
grande 1
syntaxes 1
layout 1
untyped 1
ones 1
comment 1
passing 1
software 1
ecosystem 1
gcc 1
during 1
april 1
integers 1
feedback 1
compatible 1
instrumentation 1
abandoned 1
best-effort 1
compress 1
work 1
slanting 1
michele 1
exist 1
occam 1
concatenation 1
examples 1
motto 1
terminate 1
stated 1
internal 1
pascal 1
classical 1
mutex 1
range 1
our 1
specified 1
capacity 1
utf- 1
across 1
flexibility 1
feature 1
assert 1
causes 1
writing 1
get 1
resembling 1
place 1
decompressed 1
uninitialized 1
established 1
fuzzing 1
transformation 1
sends 1
token 1
site 1
capitalized 1
additionally 1
caddy 1
uppercase 1
argument 1
addresses 1
aliases 1
existence 1
rebuttal 1
float 1
space 1
constants 1
enumerated 1
localhost 1
readable 1
taylor 1
demonstrates 1
filed 1
failed 1
sans-serif 1
core 1
collision 1
addressed 1
proposed 1
tbb 1
compile-time 1
concrete 1
dave 1
scala 1
instances 1
multithreaded 1
line 1
according 1
seasoned 1
statements 1
platform 1
network 1
three-statement 1
aware 1
computing 1
shortcut 1
servers 1
stylized 1
asynchronous 1
parameter 1
iteration 1
track 1
spent 1
edges 1
arbitrary 1
allowing 1
command 1
francis 1
growth 1
arguments 1
delegation 1
wikidata 1
aiming 1
