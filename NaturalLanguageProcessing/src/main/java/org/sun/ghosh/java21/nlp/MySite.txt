go is a statically typed compiled high-level programming language designed at google by robert griesemer rob pike and ken thompson it is syntactically similar to c but also has memory safety garbage collection structural typing and csp-style concurrency it is often referred to as golang because of its former domain name golang org but its proper name is go there are two major implementations a third-party source-to-source compiler gopherjs compiles go to javascript for front-end web development go was designed at google in to improve programming productivity in an era of multicore networked machines and large codebases the designers wanted to address criticism of other languages in use at google but keep their useful characteristics its designers were primarily motivated by their shared dislike of c go was publicly announced in november and version was released in march go is widely used in production at google and in many other organizations and open-source projects the gopher mascot was introduced in for the open source launch of the language the design by ren e french borrowed from a c wfmu promotion in november the go and go mono fonts were released by type designers charles bigelow and kris holmes specifically for use by the go project go is a humanist sans-serif resembling lucida grande and go mono is monospaced both fonts adhere to the wgl character set and were designed to be legible with a large x-height and distinct letterforms both go and go mono adhere to the din standard by having a slashed zero lowercase l with a tail and an uppercase i with serifs in april the original logo was redesigned by brand designer adam smith the new logo is a modern stylized go slanting right with trailing streamlines the gopher mascot remained the same the lack of support for generic programming in initial versions of go drew considerable criticism the designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic but are treated as special cases pike called this a weakness that might be changed at some point the google team built at least one compiler for an experimental go dialect with generics but did not release it in august the go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback however the error handling proposal was eventually abandoned in june a new draft design document was published that would add the necessary syntax to go for declaring generic functions and types a code translation tool go go was provided to allow users to try the new syntax along with a generics-enabled version of the online go playground generics were finally added to go in version go guarantees compatibility for the language specification and major parts of the standard library all versions up to the current go release have maintained this promise each major go release is supported until there are two newer major releases go is influenced by c especially the plan dialect failed verification see discussion but with an emphasis on greater simplicity and safety it consists of go s syntax includes changes from c aimed at keeping code concise and readable a combined declaration initialization operator was introduced that allows the programmer to write i or s hello world without specifying the types of variables used this contrasts with c s int i and const char s hello world semicolons still terminate statements b but are implicit when the end of a line occurs c methods may return multiple values and returning a result err pair is the conventional way a method indicates an error to its caller in go d go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices as an alternative to c s three-statement for loop go s range expressions allow concise iteration over arrays slices strings maps and channels go has a number of built-in types including numeric ones byte int float etc booleans and byte strings string strings are immutable built-in operators and keywords rather than functions provide concatenation comparison and utf- encoding decoding record types can be defined with the struct keyword for each type t and each non-negative integer constant n there is an array type denoted n t arrays of differing lengths are thus of different types dynamic arrays are available as slices denoted t for some type t these have a length and a capacity specifying when new memory needs to be allocated to expand the array several slices may share their underlying memory pointers are available for all types and the pointer-to- t type is denoted t address-taking and indirection use the and operators as in c or happen implicitly through the method call or attribute access syntax there is no pointer arithmetic e except via the special unsafe pointer type in the standard library for a pair of types k v the type map k v is the type mapping type- k keys to type- v values though go programming language specification does not give any performance guarantees or implementation requirements for map types hash tables are built into the language with special syntax and built-in functions chan t is a channel that allows sending values of type t between concurrent go processes aside from its support for interfaces go s type system is nominal the type keyword can be used to define a new named type which is distinct from other named types that have the same layout in the case of a struct the same members in the same order some conversions between types e g between the various integer types are pre-defined and adding a new type may define additional conversions but conversions between named types must always be invoked explicitly for example the type keyword can be used to define a type for ipv addresses based on -bit unsigned integers as follows with this type definition ipv addr x interprets the uint value x as an ip address simply assigning x to a variable of type ipv addr is a type error constant expressions may be either typed or untyped they are given a type when assigned to a typed variable if the value they represent passes a compile-time check function types are indicated by the func keyword they take zero or more parameters and return zero or more values all of which are typed the parameter and return values determine a function type thus func string int int error is the type of functions that take a string and a -bit signed integer and return a signed integer of default width and a value of the built-in interface type error any named type has a method set associated with it the ip address example above can be extended with a method for checking whether its value is a known standard due to nominal typing this method definition adds a method to ipv addr but not on uint while methods have special definition and call syntax there is no distinct method type go provides two features that replace class inheritance citation needed the first is embedding which can be viewed as an automated form of composition the second are its interfaces which provides runtime polymorphism interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of go an object which is of an interface type is also of another type much like c objects being simultaneously of a base and derived class go interfaces were designed after protocols from the smalltalk programming language multiple sources use the term duck typing when describing go interfaces although the term duck typing is not precisely defined and therefore not wrong it usually implies that type conformance is not statically checked because conformance to a go interface is checked statically by the go compiler except when performing a type assertion the go authors prefer the term structural typing the definition of an interface type lists required methods by name and type any object of type t for which functions exist matching all the required methods of interface type i is an object of type i as well the definition of type t need not and cannot identify type i for example if shape square and circle are defined as then both a square and a circle are implicitly a shape and can be assigned to a shape-typed variable in formal language go s interface system provides structural rather than nominal typing interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds the go standard library uses interfaces to provide genericity in several places including the input output system that is based on the concepts of reader and writer besides calling methods via interfaces go allows converting interface values to other types with a run-time type check the language constructs to do so are the type assertion which checks against a single potential type and the type switch which checks against multiple types citation needed the empty interface interface is an important base case because it can refer to an item of any concrete type it is similar to the object class in java or c and is satisfied by any type including built-in types like int code using the empty interface cannot simply call methods or built-in operators on the referred-to object but it can store the interface value try to convert it to a more useful type via a type assertion or type switch or inspect it with go s reflect package because interface can refer to any value it is a limited way to escape the restrictions of static typing like void in c but with additional run-time type checks citation needed the interface type can be used to model structured data of any arbitrary schema in go such as json or yaml data by representing it as a map string interface map of string to empty interface this recursively describes data in the form of a dictionary with string keys and values of any type interface values are implemented using pointer to data and a second pointer to run-time type information like some other types implemented using pointers in go interface values are nil if uninitialized since version go supports generic code using parameterized types functions and types now have the ability to be generic using type parameters these type parameters are specified within square brackets right after the function or type name the compiler transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided either explicitly by the user or type inference by the compiler this transformation process is referred to as type instantiation interfaces now can define a set of types known as type set using union operator as well as a set of methods these changes were made to support type constraints in generics code for a generic function or type a constraint can be thought of as the type of the type argument a meta-type this new t syntax will be the first use of as a token in go t means the set of all types whose underlying type is t go uses the iota keyword to create enumerated constants in go s package system each package has a path e g compress bzip or golang org x net html and a name e g bzip or html references to other packages definitions must always be prefixed with the other package s name and only the capitalized names from other packages are accessible io reader is public but bzip reader is not the go get command can retrieve packages stored in a remote repository and developers are encouraged to develop packages inside a base path corresponding to a source repository such as example com user name package name to reduce the likelihood of name collision with future additions to the standard library or other external libraries the go language has built-in facilities as well as library support for writing concurrent programs concurrency refers not only to cpu parallelism but also to asynchrony letting slow operations like a database or network read run while the program does other work as is common in event-based servers the primary concurrency construct is the goroutine a type of green thread a function call prefixed with the go keyword starts a function in a new goroutine the language specification does not specify how goroutines should be implemented but current implementations multiplex a go process s goroutines onto a smaller set of operating-system threads similar to the scheduling performed in erlang while a standard library package featuring most of the classical concurrency control structures mutex locks etc is available idiomatic concurrent programs instead prefer channels which send messages between goroutines optional buffers store messages in fifo order and allow sending goroutines to proceed before their messages are received channels are typed so that a channel of type chan t can only be used to transfer messages of type t special syntax is used to operate on them -ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch while ch - x sends the value x possibly blocking until another goroutine receives the value the built-in switch-like select statement can be used to implement non-blocking communication on multiple channels see below for an example go has a memory model describing how goroutines must use channels or other operations to safely share data the existence of channels sets go apart from actor model-style concurrent languages like erlang where messages are addressed directly to actors corresponding to goroutines the actor style can be simulated in go by maintaining a one-to-one correspondence between goroutines and channels but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels from these tools one can build concurrent constructs like worker pools pipelines in which say a file is decompressed and parsed as it downloads background calls with timeout fan-out parallel calls to a set of services and others channels have also found uses further from the usual notion of interprocess communication like serving as a concurrency-safe list of recycled buffers implementing coroutines which helped inspire the name goroutine and implementing iterators concurrency-related structural conventions of go channels and alternative channel inputs are derived from tony hoare s communicating sequential processes model unlike previous concurrent programming languages such as occam or limbo a language on which go co-designer rob pike worked go does not provide any built-in notion of safe or verifiable concurrency while the communicating-processes model is favored in go it is not the only one all goroutines in a program share a single address space this means that mutable objects and pointers can be shared between goroutines see lack of data race safety below although go s concurrency features are not aimed primarily at parallel processing they can be used to program shared-memory multi-processor machines various studies have been done into the effectiveness of this approach one of these studies compared the size in lines of code and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a go expert from google s development team doing the same for chapel cilk and intel tbb the study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion while the expert wrote distribute-work-synchronize programs using one goroutine per processor core the expert s programs were usually faster but also longer go s approach to concurrency can be summarized as don t communicate by sharing memory share memory by communicating there are no restrictions on how goroutines access shared data making data races possible specifically unless a program explicitly synchronizes via channels or other means writes from one goroutine might be partly entirely or not at all visible to another often with no guarantees about ordering of writes furthermore go s internal data structures like interface values slice headers hash tables and string headers are not immune to data races so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization instead of language support safe concurrent programming thus relies on conventions for example chisnall recommends an idiom called aliases xor mutable meaning that passing a mutable value or pointer over a channel signals a transfer of ownership over the value to its receiver the gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version additionally a best-effort race detector is also included by default since version of the gc runtime for access to the map data type the linker in the gc toolchain creates statically linked binaries by default therefore all go binaries include the go runtime go deliberately omits certain features common in other languages including implementation inheritance assertions f pointer arithmetic e implicit type conversions untagged unions g and tagged unions h the designers added only those facilities that all three agreed on of the omitted language features the designers explicitly argue against assertions and pointer arithmetic while defending the choice to omit type inheritance as giving a more useful language encouraging instead the use of interfaces to achieve dynamic dispatch i and composition to reuse code composition and delegation are in fact largely automated by struct embedding according to researchers schmager et al this feature has many of the drawbacks of inheritance it affects the public interface of objects it is not fine-grained i e no method-level control over embedding methods of embedded objects cannot be hidden and it is static making it not obvious whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance exception handling was initially omitted in go due to lack of a design that gives value proportionate to the complexity an exception-like panic recover mechanism that avoids the usual try-catch control structure was proposed and released in the march snapshot the go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request or as a shortcut to propagate errors up the stack within a package across package boundaries go includes a canonical error type and multi-value returns using this type are the standard idiom the go authors put substantial effort into influencing the style of go programs the main go distribution includes tools for building testing and analyzing code it also includes profiling and debugging support fuzzing capabilities to detect bugs runtime instrumentation for example to track garbage collection pauses and a data race detector another tool maintained by the go team but is not included in go distributions is gopls a language server that provides ide features such as intelligent code completion to language server protocol compatible editors an ecosystem of third-party tools adds to the standard distribution such as gocode which enables code autocompletion in many text editors goimports which automatically adds removes package imports as needed and errcheck which detects code that might unintentionally ignore errors where fmt is the package for formatted i o similar to c s c file input output the following simple program demonstrates go s concurrency features to implement an asynchronous program it launches two lightweight threads goroutines one waits for the user to type some text while the other implements a timeout the select statement waits for either of these goroutines to send a message to the main routine and acts on the first message to arrive example adapted from david chisnall s book the testing package provides support for automated testing of go packages target function example test code note that assert keyword is missing in go tests live in filename test go at the same package it is possible to run tests in parallel the net http package provides support for creating web applications this example would show hello world when localhost is visited go has found widespread adoption in various domains due to its robust standard library and ease of use popular applications include caddy a web server that automates the process of setting up https docker which provides a platform for containerization aiming to ease the complexities of software development and deployment kubernetes which automates the deployment scaling and management of containerized applications cockroachdb a distributed sql database engineered for scalability and strong consistency and hugo a static site generator that prioritizes speed and flexibility allowing developers to create websites efficiently for further examples please also see related query to wikidata the interface system and the deliberate omission of inheritance were praised by michele simionato who likened these characteristics to those of standard ml calling it a shame that no popular language has followed this particular route dave astels at engine yard wrote in go is extremely easy to dive into there are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous go is still experimental and still a little rough around the edges go was named programming language of the year by the tiobe programming community index in its first year for having a larger -month increase in popularity in only months after its introduction in november than any other language that year and reached th place by january surpassing established languages like pascal by june its ranking had dropped to below th in the index placing it lower than cobol and fortran but as of january its ranking had surged to th indicating significant growth in popularity and adoption go was again awarded tiobe programming language of the year in citation needed bruce eckel has stated the complexity of c even more complexity has been added in the new c and the resulting impact on productivity is no longer justified all the hoops that the c programmer had to jump through in order to use a c-compatible language make no sense anymore -- they re just a waste of time and effort go makes much more sense for the class of problems that c was originally intended to solve a evaluation of the language and its gc implementation in comparison to c gcc java and scala by a google engineer found go offers interesting language features which also allow for a concise and standardized notation the compilers for this language are still immature which reflects in both performance and binary sizes the evaluation got a rebuttal from the go development team ian lance taylor who had improved the go code for hundt s paper had not been aware of the intention to publish his code and says that his version was never intended to be an example of idiomatic or efficient go russ cox then optimized the go code as well as the c code and got the go code to run almost as fast as the c version and more than an order of magnitude faster than the code in the paper on november the day of the general release of the language francis mccabe developer of the go programming language note the exclamation point requested a name change of google s language to prevent confusion with his language which he had spent years developing mccabe raised concerns that the big guy will end up steam-rollering over him and this concern resonated with the more than developers who commented on google s official issues thread saying they should change the name with some even saying the issue contradicts google s motto of don t be evil on october the filed public issue ticket was closed by google developer russ cox rsc with the custom status unfortunate accompanied by the following comment there are many computing products and services named go in the months since our release there has been minimal confusion of the two languages