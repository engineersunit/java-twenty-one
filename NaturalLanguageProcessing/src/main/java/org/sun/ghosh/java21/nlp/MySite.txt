java is a high-level class-based object-oriented programming language that is designed to have as few implementation dependencies as possible it is a general-purpose programming language intended to let programmers write once run anywhere wora meaning that compiled java code can run on all platforms that support java without the need to recompile java applications are typically compiled to bytecode that can run on any java virtual machine jvm regardless of the underlying computer architecture the syntax of java is similar to c and c but has fewer low-level facilities than either of them the java runtime provides dynamic capabilities such as reflection and runtime code modification that are typically not available in traditional compiled languages java gained popularity shortly after its release and has been a very popular programming language since then java was the third most popular programming language in update according to github and it is ranked fourth on tiobe index as of january update although still widely popular there has been a gradual decline in use of java in recent years with other languages using jvm gaining popularity java was originally developed by james gosling at sun microsystems it was released in may as a core component of suns java platform the original and reference implementation java compilers virtual machines and class libraries were originally released by sun under proprietary licenses as of may in compliance with the specifications of the java community process sun had relicensed most of its java technologies under the gpl--only license oracle offers its own hotspot java virtual machine however the official reference implementation is the openjdk jvm which is free open-source software and used by most developers and is the default jvm for almost all linux distributions as of september update java is the latest version which is also a long-term support lts version java and are previous lts versions still officially supported james gosling mike sheridan and patrick naughton initiated the java language project in june java was originally designed for interactive television but it was too advanced for the digital cable television industry at the time the language was initially called oak after an oak tree that stood outside goslings office later the project went by the name green and was finally renamed java from java coffee a type of coffee from indonesia gosling designed java with a cc-style syntax that system and application programmers would find familiar sun microsystems released the first public implementation as java in it promised write once run anywhere wora functionality providing no-cost run-times on popular platforms fairly secure and featuring configurable security it allowed network- and file-access restrictions major web browsers soon incorporated the ability to run java applets within web pages and java quickly became popular the java compiler was re-written in java by arthur van hoff to comply strictly with the java language specification with the advent of java released initially as jse in december new versions had multiple configurations built for different types of platforms jee included technologies and apis for enterprise applications typically run in server environments while jme featured apis optimized for mobile applications the desktop version was renamed jse in for marketing purposes sun renamed new j versions as java ee java me and java se respectively in sun microsystems approached the isoiec jtc standards body and later the ecma international to formalize java but it soon withdrew from the process java remains a de facto standard controlled through the java community process at one time sun made most of its java implementations available without charge despite their proprietary software status sun generated revenue from java through the selling of licenses for specialized products such as the java enterprise system on november sun released much of its java virtual machine jvm as free and open-source software foss under the terms of the gpl--only license on may sun finished the process making all of its jvms core code available under free softwareopen-source distribution terms aside from a small portion of code to which sun did not hold the copyright suns vice-president rich green said that suns ideal role with regard to java was as an evangelist following oracle corporations acquisition of sun microsystems in oracle has described itself as the steward of java technology with a relentless commitment to fostering a community of participation and transparency this did not prevent oracle from filing a lawsuit against google shortly after that for using java inside the android sdk see the android section on april james gosling resigned from oracle in january oracle announced that java run-time environments based on jdk will discontinue the browser plugin java software runs on everything from laptops to data centers game consoles to scientific supercomputers oracle and others highly recommend uninstalling outdated and unsupported versions of java due to unresolved security issues in older versions there were five primary goals in the creation of the java language as of september update java and are supported as long-term support lts versions oracle released the last zero-cost public update for the legacy version java lts in january for commercial use although it will otherwise still support java with public updates for personal use indefinitely other vendors have begun to offer zero-cost builds of openjdk and and that are still receiving security and other upgradescitation needed major release versions of java along with their release dates sun has defined and supports four editions of java targeting different application environments and segmented many of its apis so that they belong to one of the platforms the platforms are the classes in the java apis are organized into separate groups called packages each package contains a set of related interfaces classes subpackages and exceptions sun also provided an edition called personal java that has been superseded by later standards-based java me configuration-profile pairings one design goal of java is portability which means that programs written for the java platform must run similarly on any combination of hardware and operating system with adequate run time support this is achieved by compiling the java language code to an intermediate representation called java bytecode instead of directly to architecture-specific machine code java bytecode instructions are analogous to machine code but they are intended to be executed by a virtual machine vm written specifically for the host hardware end-users commonly use a java runtime environment jre installed on their device for standalone java applications or a web browser for java applets standard libraries provide a generic way to access host-specific features such as graphics threading and networking the use of universal bytecode makes porting simple however the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables just-in-time jit compilers that compile byte-codes to machine code during runtime were introduced from an early stage javas hotspot compiler is actually two compilers in one and with graalvm included in eg java but removed as of java allowing tiered compilation java itself is platform-independent and is adapted to the particular platform it is to run on by a java virtual machine jvm which translates the java bytecode into the platforms machine language programs written in java have a reputation for being slower and requiring more memory than those written in c however java programs execution speed improved significantly with the introduction of just-in-time compilation in for java the addition of language features supporting better code analysis such as inner classes the stringbuilder class optional assertions etc and optimizations in the java virtual machine such as hotspot becoming suns default jvm in with java the performance was improved with the addition of the javautilconcurrent package including lock-free implementations of the concurrentmaps and other multi-core collections and it was improved further with java some platforms offer direct hardware support for java there are micro controllers that can run java bytecode in hardware instead of a software java virtual machine and some arm-based processors could have hardware support for executing java bytecode through their jazelle option though support has mostly been dropped in current implementations of arm java uses an automatic garbage collector to manage memory in the object lifecycle the programmer determines when objects are created and the java runtime is responsible for recovering the memory once objects are no longer in use once no references to an object remain the unreachable memory becomes eligible to be freed automatically by the garbage collector something similar to a memory leak may still occur if a programmers code holds a reference to an object that is no longer needed typically when objects that are no longer needed are stored in containers that are still in use if methods for a non-existent object are called a null pointer exception is thrown one of the ideas behind javas automatic memory management model is that programmers can be spared the burden of having to perform manual memory management in some languages memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap in the latter case the responsibility of managing memory resides with the programmer if the program does not deallocate an object a memory leak occurs if the program attempts to access or deallocate memory that has already been deallocated the result is undefined and difficult to predict and the program is likely to become unstable or crash this can be partially remedied by the use of smart pointers but these add overhead and complexity garbage collection does not prevent logical memory leaks ie those where the memory is still referenced but never used garbage collection may happen at any time ideally it will occur when a program is idle it is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object this can cause a program to stall momentarily explicit memory management is not possible in java java does not support cc style pointer arithmetic where object addresses can be arithmetically manipulated eg by adding or subtracting an offset this allows the garbage collector to relocate referenced objects and ensures type safety and security as in c and some other object-oriented languages variables of javas primitive data types are either stored directly in fields for objects or on the stack for methods rather than on the heap as is commonly true for non-primitive data types but see escape analysis this was a conscious decision by javas designers for performance reasons java contains multiple types of garbage collectors since java hotspot uses the garbage first garbage collector ggc as the default however there are also several other garbage collectors that can be used to manage the heap for most applications in java ggc is sufficient previously the parallel garbage collector was used in java having solved the memory management problem does not relieve the programmer of the burden of handling properly other kinds of resources like network or database connections file handles etc especially in the presence of exceptions the syntax of java is largely influenced by c and c unlike c which combines the syntax for structured generic and object-oriented programming java was built almost exclusively as an object-oriented language all code is written inside classes and every data item is an object with the exception of the primitive data types ie integers floating-point numbers boolean values and characters which are not objects for performance reasons java reuses some popular aspects of c such as the printf method unlike c java does not support operator overloading or multiple inheritance for classes though multiple inheritance is supported for interfaces java uses comments similar to those of c there are three different styles of comments a single line style marked with two slashes a multiple line style opened with and closed with and the javadoc commenting style opened with and closed with the javadoc style of commenting allows the user to run the javadoc executable to create documentation for the program and can be read by some integrated development environments ides such as eclipse to allow developers to access documentation within the ide java applets are programs embedded in other applications typically in a web page displayed in a web browser the java applet api is now deprecated since java in java servlet technology provides web developers with a simple consistent mechanism for extending the functionality of a web server and for accessing existing business systems servlets are server-side java ee components that generate responses to requests from clients most of the time this means generating html pages in response to http requests although there are a number of other standard servlet classes available for example for websocket communication the java servlet api has to some extent been superseded but still used under the hood by two standard java technologies for web services typical implementations of these apis on application servers or servlet containers use a standard servlet for handling all interactions with the http requests and responses that delegate to the web service methods for the actual business logic javaserver pages jsp are server-side java ee components that generate responses typically html pages to http requests from clients jsps embed java code in an html page by using the special delimiters and a jsp is compiled to a java servlet a java application in its own right the first time it is accessed after that the generated servlet creates the response swing is a graphical user interface library for the java se platform it is possible to specify a different look and feel through the pluggable look and feel system of swing clones of windows gtk and motif are supplied by sun apple also provides an aqua look and feel for macos where prior implementations of these looks and feels may have been considered lacking swing in java se addresses this problem by using more native gui widget drawing routines of the underlying platforms javafx is a software platform for creating and delivering desktop applications as well as rich web applications that can run across a wide variety of devices javafx is intended to replace swing as the standard gui library for java se but since jdk javafx has not been in the core jdk and instead in a separate module javafx has support for desktop computers and web browsers on microsoft windows linux and macos javafx does not have support for native os look and feels in generics were added to the java language as part of jse prior to the introduction of generics each variable declaration had to be of a specific type for container classes for example this is a problem because there is no easy way to create a container that accepts only specific types of objects either the container operates on all subtypes of a class or interface usually object or a different container class has to be created for each contained class generics allow compile-time type checking without having to create many container classes each containing almost identical code in addition to enabling more efficient code certain runtime exceptions are prevented from occurring by issuing compile-time errors if java prevented all runtime type errors classcastexceptions from occurring it would be type safe in the type system of java was proven unsound in that it is possible to use generics to construct classes and methods that allow assignment of an instance one class to a variable of another unrelated class such code is accepted by the compiler but fails at run time with a class cast exception criticisms directed at java include the implementation of generics speed the handling of unsigned numbers the implementation of floating-point arithmetic and a history of security vulnerabilities in the primary java vm implementation hotspot the java class library is the standard library developed to support application development in java it is controlled by oracle in cooperation with others through the java community process program companies or individuals participating in this process can influence the design and development of the apis this process has been a subject of controversy during the s the class library contains features such as javadoc is a comprehensive documentation system created by sun microsystems it provides developers with an organized system for documenting their code javadoc comments have an extra asterisk at the beginning ie the delimiters are and whereas the normal multi-line comments in java are delimited by and and single-line comments start with oracle corporation owns the official implementation of the java se platform due to its acquisition of sun microsystems on january this implementation is based on the original implementation of java by sun the oracle implementation is available for windows macos linux and solaris because java lacks any formal standardization recognized by ecma international isoiec ansi or other third-party standards organizations the oracle implementation is the de facto standard the oracle implementation is packaged into two different distributions the java runtime environment jre which contains the parts of the java se platform required to run java programs and is intended for end users and the java development kit jdk which is intended for software developers and includes development tools such as the java compiler javadoc jar and a debugger oracle has also released graalvm a high performance java dynamic compiler and interpreter openjdk is another java se implementation that is licensed under the gnu gpl the implementation started when sun began releasing the java source code under the gpl as of java se openjdk is the official java reference implementation the goal of java is to make all implementations of java compatible historically suns trademark license for usage of the java brand insists that all implementations be compatible this resulted in a legal dispute with microsoft after sun claimed that the microsoft implementation did not support java remote method invocation rmi or java native interface jni and had added platform-specific features of their own sun sued in and in won a settlement of us million as well as a court order enforcing the terms of the license from sun as a result microsoft no longer ships java with windows platform-independent java is essential to java ee and an even more rigorous validation is required to certify an implementation this environment enables portable server-side applications the java programming language requires the presence of a software platform in order for compiled programs to be executed oracle supplies the java platform for use with java the android sdk is an alternative software platform used primarily for developing android applications with its own gui system the java language is a key pillar in android an open source mobile operating system although android built on the linux kernel is written largely in c the android sdk uses the java language as the basis for android applications but does not use any of its standard gui se me or other established java standards the bytecode language supported by the android sdk is incompatible with java bytecode and runs on its own virtual machine optimized for low-memory devices such as smartphones and tablet computers depending on the android version the bytecode is either interpreted by the dalvik virtual machine or compiled into native code by the android runtime android does not provide the full java se standard library although the android sdk does include an independent implementation of a large subset of it it supports java and some java features offering an implementation compatible with the standard library apache harmony the use of java-related technology in android led to a legal dispute between oracle and google on may a san francisco jury found that if apis could be copyrighted then google had infringed oracles copyrights by the use of java in android devices district judge william alsup ruled on may that apis cannot be copyrighted but this was reversed by the united states court of appeals for the federal circuit in may on may the district court decided in favor of google ruling the copyright infringement of the java api in android constitutes fair use in march this ruling was overturned by the appeals court which sent down the case of determining the damages to federal court in san francisco google filed a petition for writ of certiorari with the supreme court of the united states in january to challenge the two rulings that were made by the appeals court in oracles favor on april the court ruled in googles favor that its use of java apis should be considered fair use however the court refused to rule on the copyrightability of apis choosing instead to determine their ruling by considering javas api copyrightable purely for arguments sake